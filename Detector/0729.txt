#include <Servo.h>
Servo myservo;
int input1 = 5; // 定义uno的pin 5 向 input1 输出
int input2 = 6; // 定义uno的pin 6 向 input2 输出
int input3 = 9; // 定义uno的pin 9 向 input3 输出
int input4 = 10; // 定义uno的pin 10 向 input4 输出

const int TrigPin = 2;
const int EchoPin = 3;
float distance;
int pos = 0;
int turn_check=0;
float * list;
void setup()
{ // 初始化串口通信及连接SR04的引脚

  myservo.attach(11);
  Serial.begin(9600);
  pinMode(TrigPin, OUTPUT);
  // 要检测引脚上输入的脉冲宽度，需要先设置为输入状态
  pinMode(EchoPin, INPUT);
  Serial.println("Ultrasonic sensor:");
  pinMode(input1, OUTPUT);
  pinMode(input2, OUTPUT);
  pinMode(input3, OUTPUT);
  pinMode(input4, OUTPUT);
  list = (float*)malloc(140 * sizeof(float));
}

void loop()
{
  Idle();
  sweep();
  float min_d = 15;
  int check = -1;
  for (int i = 0; i < 140; i++)
  {
    if (list[i] < min_d)
    {
      min_d = list[i];
      check = i;
    }
  }
  if (check == -1)
  {
    turn_check=0;
    Forward();
    delay(300);
  }
  else if (list[check] < 15)
  {
    if(turn_check==1)
    {
      TurnLeft();
    }
      if(turn_check==2)
      {
      TurnRight();
      }
      if(turn_check==0)
      {
        if(check<70)
        {
          TurnLeft();
          turn_check=1;
         }
         else
         {
          TurnRight();
          turn_check=2;
          }
       }
    
    
//    if (list[check] < 15)
//    {
//      //Serial.print("right");
//      TurnRight();
//    }
//    else
//    {
//      Forward();
//      delay(100);
//    }
  }
//  if (check == -1)
//  {
//    Forward();
//    delay(100);
//  }
//  else if (check < 40)
//  {
//    if (list[check] < 12)
//    {
//      Serial.print("left");
//      TurnLeft();
//    }
//    else
//    {
//      Forward();
//      delay(100);
//    }
//  }
//  else if (check >= 120)
//  {
//    if (list[check] < 12)
//    {
//      Serial.print("right");
//      TurnRight();
//    }
//    else
//    {
//      Forward();
//      delay(100);
//    }
//
//  }
//  else
//  {
//     if (list[80] < 12)
//    {
//      Serial.print("right");
//      TurnRight();
//    }
//    else
//    {
//      Forward();
//      delay(100);
//    }
//   }
  /*distance=Search();
    if(distance<17)
    {
    if(distance<7)
    {
      Backward();
     }
     else
     {
        TurnRight();
      }
    //Idle();

    //sweep();
    }
    else
    {
     Forward();
     delay(100);
    }*/
//  for (int i = 0; i < 170; i++)
//  {
//    Serial.print("mark:");
//    Serial.print(i);
//    Serial.print("   ");
//    Serial.print(list[i]);
//    Serial.print("cm");
//    Serial.println();
//  }

  //delay(100);
}

float Search()
{

  digitalWrite(TrigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(TrigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(TrigPin, LOW);
  // 检测脉冲宽度，并计算出距离
  distance = pulseIn(EchoPin, HIGH) / 58.00;
  return distance;
}
void sweep()
{
  int i = 0;
  for (pos = 15; pos < 155; pos += 1) {
    // in steps of 1 degree
    myservo.write(pos);
    delay(5);
    distance = Search();
    list[i] = distance;
    i++;
  }
  //  for (pos = 180; pos <= -180; pos -= 1) {
  //        myservo.write(pos);
  //        delay(5);
  //        distance=Search();
  //        if(distance<17)
  //        {
  //          if(distance<7)
  //          {
  //            Backward();
  //           }
  //           else
  //           {
  //            if(pos>0)
  //              TurnRight();
  //            }
  //            if(pos<0)
  //            {
  //               TurnLeft();
  //            }
  //        }
  //        else
  //        {
  //           Forward();
  //           delay(100);
  //         }
  //      }
}

void TurnLeft()
{
  analogWrite(5, 255);
  analogWrite(6, 0);
  analogWrite(9, 255);
  analogWrite(10, 0);
  delay(300);
}
void TurnRight()
{
  analogWrite(5, 0);
  analogWrite(6, 255);
  analogWrite(9, 0);
  analogWrite(10, 255);
  delay(300);
}

void Idle()
{
  analogWrite(5, 0);
  analogWrite(6, 0);
  analogWrite(9, 0);
  analogWrite(10, 0);
  
}
void Forward()
{
  analogWrite(5, 0);
  analogWrite(6, 255);
  analogWrite(9, 255);
  analogWrite(10, 0);
}
void Backward()
{
  analogWrite(5, 255);
  analogWrite(6, 0);
  analogWrite(9, 0);
  analogWrite(10, 255);
  delay(300);
}